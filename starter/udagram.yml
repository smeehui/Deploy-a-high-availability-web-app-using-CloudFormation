AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CD12352 - Infrastructure as Code Project - Udagram - HuyNVQ


Parameters:
  EnvName:
    Description: Environment name that will be prefixed to resources.
    Type: String

  InstanceType:
    Description: Provide the instance type
    Type: String
    AllowedValues: [ t2.micro, t2.medium, t3.medium, t3.large, t3.xlarge, t3.2xlarge ]

Resources:
  S3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      RoleName: !Sub ${EnvName}-Role

  S3RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - arn:aws:s3:::udacity-cloudformation-code
              - arn:aws:s3:::udacity-cloudformation-code/*
      Roles:
        - Ref: S3ReadOnlyRole

  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: S3ReadOnlyRole

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !ImportValue VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId: !ImportValue VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !ImportValue PUB1-CIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !ImportValue PUB2-CIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: UdagramLaunchTemplate
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: yes
            DeleteOnTermination: yes
            Groups:
              - !Ref WebServerSecGroup
        ImageId: ami-07ebfd5b3428b6f4d
        InstanceType: !Ref InstanceType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo service nginx start
            cd /var/www/html
            sudo echo "it works! Udagram, Udacity, great job!" > index.html

  WebAppTargetGroupARNs:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !ImportValue VPCId

  WebAppASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue PRI1-SN
        - !ImportValue PRI2-SN
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - Ref: WebAppTargetGroupARNs

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue PUB1-SN
        - !ImportValue PUB2-SN
      SecurityGroups:
        - Ref: LBSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroupARNs
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroupARNs
      Conditions:
        - Field: path-pattern
          Values: [ / ]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  WebAppLBDNSName:
    Description: A reference to the DNS name from load balancer
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub ${EnvName}-LB-DNSName